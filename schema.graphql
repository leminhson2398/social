type CategoryType {
  id: ID!
  name: String!
  slug: String!
  created: DateTime!
  trending: Boolean!
  views: Int!
  shops: [ShopType]
  products: [ProductType]
}

type CreateAppUser {
  ok: Boolean!
  user: UserType
  error: String
}

type CreateCategory {
  category: CategoryType
}

type CreateCountry {
  country: ImportCountryType
}

type CreateProduct {
  product: ProductType
}

type CreateProductComment {
  comment: ProductCommentType!
}

scalar DateTime

scalar GenericScalar

type ImportCountryType {
  id: ID!
  name: String!
  slug: String!
  created: DateTime!
  updated: DateTime!
  trending: Boolean!
  views: Int!
  products: [ProductType]
}

type Mutation {
  createProductComment(image: Upload, product: String!, text: String): CreateProductComment
  createCountry(name: String!): CreateCountry
  createCategory(name: String!): CreateCategory
  updateShop(categories: [Int!]!, email: String, name: String, phone: String, slogan: String): UpdateShop
  createProduct(categories: [Int!]!, description: String!, imageUrl: [String!] = [], onSale: Float = 0.0, price: Float!, source: [Int] = [], title: String!, totalProducts: Int!): CreateProduct
  createUser(email: String!, password1: String!, password2: String!, username: String!): CreateAppUser
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String!): Verify
  refreshToken(token: String!): Refresh
}

type ObtainJSONWebToken {
  token: String
}

type ProductCommentType {
  id: ID!
  owner: UserType!
  product: ProductType!
  text: String
  image: String
  created: DateTime!
  updated: DateTime!
}

type ProductImageType {
  id: ID!
  product: ProductType!
  imageUrl: String!
  altText: String!
}

type ProductType {
  id: UUID!
  title: String!
  slug: String!
  description: String!
  shop: ShopType!
  categories: [CategoryType]
  added: DateTime!
  updated: DateTime!
  price: Float!
  onSale: Float!
  available: Boolean!
  totalProducts: Int!
  views: Int!
  hot: Boolean!
  source: [ImportCountryType]
  comments: [ProductCommentType]
  images: [ProductImageType]
}

type Query {
  productImage: ProductImageType
  productImages(search: String!): [ProductImageType]
  userImage: UserImageType
  userImages: [UserImageType]
  ProductImage: ProductImageType
  ProductImages: [ProductImageType]
  shopComments: [ShopCommentType]
  productComments: [ProductCommentType]
  productComment(search: String!): ProductCommentType
  shopComment(search: String!): ShopCommentType
  shops: [ShopType]
  products: [ProductType]
  countries: [ImportCountryType]
  categories: [CategoryType]
  category(search: String!): CategoryType
  product(title: String!): ProductType
  shop(id: Int, name: String): ShopType
  country(name: String!): ImportCountryType
  me: UserType
  users: [UserType]
  user(search: String): [UserType]
}

type Refresh {
  token: String
  payload: GenericScalar
}

type ShopCommentType {
  id: ID!
  shop: ShopType!
  owner: UserType!
  text: String
  created: DateTime!
  updated: DateTime!
}

type ProductImageType {
  id: UUID!
  image: String
  shop: ShopType!
  upload: DateTime!
}

type ShopType {
  id: ID!
  name: String!
  slug: String!
  owner: UserType!
  slogan: String
  categories: [CategoryType]
  created: DateTime!
  updated: DateTime!
  email: String!
  phone: String
  views: Int!
  trending: Boolean!
  products: [ProductType]
  comments: [ShopCommentType]
  images: [ProductImageType]
}

scalar UUID

type UpdateShop {
  shop: ShopType
}

scalar Upload

type UserImageType {
  id: UUID!
  image: String
  user: UserType!
  upload: DateTime!
}

type UserType {
  id: ID!
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  shop: ShopType
  productComments: [ProductCommentType]
  shopComments: [ShopCommentType]
  images: [UserImageType]
}

type Verify {
  payload: GenericScalar
}